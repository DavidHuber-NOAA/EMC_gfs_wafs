# makefile for FIP
#----------------------------------------
# ifort -O -I /nwprod/lib/incmod/g2_4 degrib2.f -L/nwprod/lib -lg2_4 -lw3emc_4 -lw3nco_4 -lbacio_4 -lip_4 -lsp_4 -ljasper -lpng -lz -o degrib2

FC = ifort
INC = /apps/contrib/NCEPLIBS/orion/include/g2_v3.1.1_4

### For whoever wants to use the code, change LIBS according to different machine.
LIBS = /apps/contrib/NCEPLIBS/orion/lib/libg2_v3.1.1_4.a /apps/contrib/NCEPLIBS/orion/lib/libw3nco_v2.0.7_4.a /apps/contrib/NCEPLIBS/orion/lib/libw3emc_v2.4.0_4.a /apps/contrib/NCEPLIBS/orion/lib/libip_v3.0.2_4.a /apps/contrib/NCEPLIBS/orion/lib/libbacio_v2.0.3_4.a /apps/contrib/NCEPLIBS/orion/lib/libsp_v2.0.3_4.a /apps/contrib/NCEPLIBS/orion/lib/libjasper_v1.900.2/libjasper.a /apps/contrib/NCEPLIBS/orion/lib/libpng_v1.2.44/libpng.a /apps/contrib/NCEPLIBS/orion/lib/libz_v1.2.6.a

# -L /nwprod/lib -lg2_4 -lw3emc_4 -lw3nco_4 -lbacio_4 -lip_4 -lsp_4 -ljasper -lpng -lz
FFLAGS = -O -I$(INC)

#
#----------------------------------------
# Clear out all suffixes
.SUFFIXES:
# list what we use
.SUFFIXES: .f .o .f90
# defines a suffix rule for .f -> .o
.f.o :
	$(FC) $(FFLAGS) -c -C $<

#----------------------------------------
# Macros
# Can Not Dynamically Reset Macros
# The last macro declaration defines the overall macro definition to be used everywhere.
# It's discouraged to use globbing (*, ?). It works for GNU make, but not for the Cray or IBM SP.
PROG = degrib2
SRCS = degrib2.f

# To substitute ".f" with ".o" in the list given by $(SRCS)
OBJS = $(patsubst %.f90, %.o, $(SRCS:.f=.o))
MODS = `echo $(SRCS:.f=.mod)|tr A-Z a-z`

#----------------------------------------
# default target by convention is ``all''
all : $(PROG)
$(PROG) : $(OBJS)
	$(FC) $(FFLAGS) $? $(LIBS) -o $(PROG)
$(OBJS) :

#
# @ tells not to echo the command to stdout. 
# Echoing can be disabled globally with either the ``-s'' option or the fake target .SILENT. 
clean:
	@echo "rm -f $(OBJS) $(MODS)"
	@rm -f $(OBJS) $(MODS)
	@rm -f main.mod

#----------------------------------------
#----Predefined and Internal Macros------
# $@    the name of the file/target to be ``made''
# $? 	the set of dependent names that are younger than the target
# $< 	the name of the related file that caused the action (the precursor to the target) - this is only for suffix rules
# $* 	the shared prefix of the target and dependent - only for suffix rules
# $$ 	escapes macro substitution, returns a single ``$''.

# VPATH tells make where; A colon (:) delimited; Don't include "." since it's always searched.
# VPATH = ./data:../:../scripts


# If the make is not called with a proper argument or no argument 
# it uses the ``fake'' target .DEFAULT to execute the command given there.


# include file
# reads and evaluates file as if part of the current Makefile. 
# Must not have any white-space at beginning of line.
# useful for Recursive Make For Sub-directories

