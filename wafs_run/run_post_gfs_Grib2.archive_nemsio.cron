#! /bin/bash
date
###############################################################
#  Run UPP to generate master(gfip gfis)/gtg from archived nemsio files
#  (Over loops, a collection of data sets)
#-------------------------------------------------------------
#  htype can be archive or retro
#       1. archive -- operational
#       2. retro   -- 2019_17summer (7 streams, 7 locations)
#-------------------------------------------------------------
# Flowchart:
#   run_post_gfs_Grib2.archive_nemsio.cron (loops on cyles and fhours)
#   =>run_post_gfs_Grib2.archive_nemsio.sh (inside a loop, can be run alone as well)
#   =>run_post_gfs_Grib2.nemsio.driver.wcoss
#     run_post_gfs_Grib2.nemsio.driver.cray
#     run_post_gfs_Grib2.nemsio.driver.dell
#
# Requirement:
#        
#   2) The driver/jobcard has queue 'debug': -q debug to avoid HPSS chaos
#   3) Under $HOMEgfs/exec, there must be machine-dependent versions
#        exec/ncep_post.dell
#        exec/ncep_post.cray
#        exec/ncep_post.wcoss
###############################################################

#*******************************************************
# Only run the script on develop machine:
# 1st letter of developMachine & thisMachine must match
#*******************************************************
developMachine=`cat /etc/dev`
thisMachine=`hostname` 
if [ `echo $developMachine | cut -c 1-1` != `echo $thisMachine | cut -c 1-1` ] ; then
  exit
fi
#*******************************************************
# It is loaded by .bashrc as well
. /gpfs/dell2/emc/modeling/noscrub/Yali.Mao/git/save/envir_setting.sh

set -x 

export HTAR=htar
export BSUB=bsub

export driver=$HOMEsave/wafs_run/run_post_gfs_Grib2.nemsio.driver.$MACHINE
export HOMEgfs=$HOMEgit/EMC_gtg_ncar

#====================================================
function printUsage {
#====================================================
  echo "usage: sh $HOMEsave/wafs_run/run_post_gfs_Grib2.archive_nemsio.cron  fv3gtg_archive icing/gtg/gfs(product) YYYYMMDD(start date) YYYYMMDD(end date) cycle(s) fhour(s) archive/retro(htype)"
  echo '  Tips: use quotations for a list of cycles/fhours'
  echo '        fhours can be 2 or 3 digits'
}

#====================================================
#arguments
#====================================================
if [ $# -lt 7 ]; then
  printUsage
  exit
fi

export proj=$1
prod=$2
start_date=$3"00" # add "00" to convert to YYYYMMDDHH
end_date=$4"00"
cycles=$5
fhours=$6 # input and output will be in 3 digits
htype=$7  # history type: archive/retro (retro sample:2019_17summer, for year 2019 implementation, where 2017summer data is saved)

if [ $prod != "icing" -a $prod != "gtg" -a $prod != "gfs" ] ; then
  echo "Prodcution type is not supported" 
  printUsage
  exit
fi

# check dates are in good shape
if [[ `$NDATE 0 $start_date 2>/dev/null` != $start_date ]]; then
  echo "Start date is not in good format YYYYMMDD."
  printUsage
  exit
fi
if [[ `$NDATE 0 $end_date 2>/dev/null` != $end_date ]]; then
  echo "End date is not in good format YYYYMMDD."
  printUsage
  exit
fi


#increase end_date by one day for convenience of comparison
end_date=`$NDATE 24 $end_date`


export DATA=$TMP/${proj}.${htype}.working
mkdir -p $DATA ; rm -r $DATA/*
cd $DATA


archivelist=archivelist.$MACHINE
scp ymao@emcrzdm:/home/ftp/emc/unaff/ymao/$proj/$archivelist .
if [ -e $archivelist ] ; then
    PDYlastbackup=`cat $archivelist | tail -1 | cut -c1-8`
    if [[ ${PDYlastbackup}00 > $start_date ]] ; then
	PDY=${start_date%??}
	echo "Reminding: it's done before $PDYlastbackup! Start from $PDYlastbackup now, not from $PDY"
	start_date=${PDYlastbackup}00
    fi
fi

#====================================================
# Begin to process...
#====================================================

while [[ $start_date < $end_date ]] ; do

  tyear=`echo $start_date | cut -c1-4`
  tmonth=`echo $start_date | cut -c1-6`
  PDY=${start_date%??}

  # where nemsio files are extracted to
  export COMIN=$TMP/nemsio_${htype}.$PDY
  mkdir -p  $COMIN

  # where master file will be saved
  export COMOUT=$TMP/prod_${htype}/$prod.$PDY

  for hh in $cycles ; do
    for fhour in $fhours ; do
       fh="$(printf "%03d" $(( 10#$fhour )) )"
       # sequential runs; 'parallel' HPSS/htar won't speed up and will run into errors.
       sh $HOMEsave/wafs_run/run_post_gfs_Grib2.archive_nemsio.sh $prod $PDY $hh $fh $htype
    done
  done

#  rm -r $COMIN

  start_date=`$NDATE 24 $start_date`
done
date
echo done
exit 0
